<?php

/**
 * Implements hook_ctools_plugin_directory()
 */
function salto_tagcloud_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme().
 */
function salto_tagcloud_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'salto_tagcloud') . '/templates';
  return [
    'salto_tagcloud' => [
      'variables' => [
        'vids' => NULL,
        'max_age' => NULL,
        'max_tags' => NULL,
      ],
      'template' => 'salto_tagcloud',
      'path' => $path,
    ],
  ];
}

/**
 * Implements hook_preprocess().
 */
function salto_tagcloud_preprocess_salto_tagcloud(&$variables) {

  drupal_add_js(drupal_get_path('module', 'salto_tagcloud') . '/js/salto_tagcloud.js');
  drupal_add_js(drupal_get_path('module', 'salto_tagcloud') . '/jQCloud/jqcloud-1.0.4.js');
  drupal_add_css(drupal_get_path('module', 'salto_tagcloud') . '/jQCloud/jqcloud.css');
  drupal_add_css(drupal_get_path('module', 'salto_tagcloud') . '/css/salto_tagcloud.css');

  $vids = $variables['variables']['vids'] ? $variables['variables']['vids'] : variable_get('salto_tagcloud_vids', [5]);
  $max_tags = $variables['variables']['max_tags'] ? $variables['variables']['max_tags'] : variable_get('salto_tagcloud_max_tags', 30);
  $max_age = $variables['variables']['max_age'] ? $variables['variables']['max_age'] : variable_get('salto_tagcloud_max_age', 180);

  if ($vids && !is_array($vids)) {
    $vids = explode(',', $vids);
  }

  $vids = array_map('trim', $vids);
  $tags = salto_tagcloud_get_tags($vids, $max_tags, $max_age);

  $word_list = [];
  foreach ($tags as $tag) {
    $word = [];
    $word['text'] = $tag->name;
    $word['weight'] = $tag->weight;
    $word['link'] = url("search/node") . "?f[0]=field_post_tags:" . $tag->tid;
    $word_list[] = $word;
  }

  drupal_add_js(['salto_tagcloud' => ['word_list' => $word_list]], 'setting');

}

/**
 * get tags, containing the number of nodes using them and the weight
 *
 * @param  [type]  $vids    [description]
 * @param integer $count [description]
 * @param  [type]  $max_age [description]
 *
 * @return [type]           [description]
 */
function salto_tagcloud_get_tags($vids, $count = 30, $max_age = NULL) {
  global $user;

  $options = implode('_', $vids) . '_' . $count . '_' . $max_age . '_' . $user->uid;

  $cache_name = 'tagclouds_cache_' . $options;
  $cache = cache_get($cache_name, 'cache_page');

  $tags = [];

  if (isset($cache->data)) {
    $tags = $cache->data;
  }
  else {
    if (!is_array($vids) || count($vids) == 0) {
      return [];
    }

    $query = db_select('taxonomy_term_data', 'td');
    $query->addExpression('COUNT(*)', 'count');
    $query->fields('td', ['tid', 'vid', 'name', 'description']);
    $query->addExpression('max(n.nid)', 'nid');
    $query->join('taxonomy_index', 'tn', 'td.tid = tn.tid');
    $query->join('node', 'n', 'tn.nid = n.nid');

    if ($max_age) {
      $seconds = $max_age * 24 * 60 * 60;
      $from_time = time() - $seconds;
      //max age is given in days
      $query->condition('n.changed', $from_time, '>=');
    }

    $db_or = db_or();
    $db_or->condition('n.type', 'post', '=');

    $query->condition('td.vid', $vids);
    $query->condition($db_or);
    $query->condition('n.status', 1);
    $query->groupBy('td.tid')->groupBy('td.vid')->groupBy('td.name');
    $query->groupBy('td.description HAVING COUNT(*) > 0');
    $query->orderBy('COUNT(*)', 'DESC');

    $query->addTag('node_access');

    if ($count > 0) {
      $query->range(0, $count);
    }
    $result = $query->execute();

    foreach ($result as $tag) {
      $tags[$tag->tid] = $tag;
    }

    $tags = salto_tagcloud_build_weighted_tags($tags);

    cache_set($cache_name, $tags, 'cache_page', CACHE_TEMPORARY);
  }

  return $tags;
}

/**
 *
 * API that returns an array with weighted tags.
 *
 * This is the hard part. People with better ideas are very very welcome to send
 * these to ber@webschuur.com. Distribution is one thing that needs attention.
 *
 * @param $tags
 *   A list of <em>objects</em> with the following attributes: $tag->count,
 *   $tag->tid, $tag->name and $tag->vid. Each Tag will be calculated and
 *   turned into a tag. Refer to tagclouds_get__tags() for an example.
 * @param $steps
 *   The amount of tag-sizes you will be using. If you give "12" you still get
 *   six different "weights". Defaults to 6 and is optional.
 *
 * @return
 *   An <em>unordered</em> array with tags-objects, containing the attribute
 *   $tag->weight.
 */
function salto_tagcloud_build_weighted_tags($tags, $steps = 10) {

  $tags_tmp = [];
  $min = 1e9;
  $max = -1e9;
  foreach ($tags as $id => $tag) {
    $tag->number_of_posts = $tag->count;
    $tag->weightcount = log($tag->count);
    $min = min($min, $tag->weightcount);
    $max = max($max, $tag->weightcount);
    $tags_tmp[$id] = $tag;
  }
  // Note: we need to ensure the range is slightly too large to make sure even
  // the largest element is rounded down.
  $range = max(.01, $max - $min) * 1.0001;
  foreach ($tags_tmp as $key => $value) {
    $tags[$key]->weight = 1 + floor($steps * ($value->weightcount - $min) / $range);
  }
  return $tags;
}


<?php

/**
 * @file
 * contact form in modal frame
 */

/**
 * Implementation of hook_menu().
 */
function context_support_menu() {
  $items['context_support/%ctools_js/contact'] = [
    'title' => t("Contact us"),
    'page callback' => 'context_help_page',
    'page arguments' => [1],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'context_support.pages.inc',
  ];
  return $items;
}

/**
 * Implementation of hook_form_alter().
 *
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function context_support_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {

  $form['context_support'] = [
    '#type' => 'fieldset',
    '#title' => t('Support Settings'),
  ];
  $form['context_support']['support_mail'] = [
    '#type' => 'textfield',
    '#title' => t('Support E-mail address'),
    '#default_value' => variable_get('support_mail', variable_get('site_mail', ini_get('sendmail_from'))),
    '#description' => t("The <em>From</em> mail used for support requests. (Use an address ending in your site's domain to help prevent this e-mail being flagged as spam.)"),
    '#required' => TRUE,
  ];
  $form['context_support']['support_categories'] = [
    '#type' => 'textarea',
    '#title' => t('Support categories'),
    '#default_value' => variable_get('support_categories', ''),
    '#description' => t("The categories a user can choose to classify the request. <em>One item per line, untranslated</em>"),
    '#required' => TRUE,
  ];
  $form['context_support']['context_support_mail_copy'] = [
    '#type' => 'textfield',
    '#title' => t('Send Copy to following E-mail address(es)'),
    '#default_value' => variable_get('context_support_mail_copy', ''),
    '#description' => t("Comma-separated list of e-mail addresses, which will receive a copy of every support request."),
    '#required' => FALSE,
  ];
  $form['#validate'][] = 'context_support_settings_validate';
}

/**
 * Validates the submitted site-information form.
 */
function context_support_settings_validate($form, &$form_state) {
  if ($error = user_validate_mail($form_state['values']['support_mail'])) {
    form_set_error('support_mail', $error);
  }

  if (!empty($form_state['values']['support_mail_copy'])) {
    $copy_mails = explode(',', $form_state['values']['support_mail_copy']);
    foreach ($copy_mails as $mail) {
      if ($error = user_validate_mail($mail)) {
        form_set_error('support_mail_copy', $error);
      }
    }
  }
}

function context_support_get_categories() {
  $_cat = variable_get('support_categories', '');
  $_cat = explode("\n", $_cat);
  $cat = [];
  foreach ($_cat as $i => $c) {

    if (!empty($c)) {
      $vals = explode("|", $c);
      $cat[$vals[0]] = [
        "id" => $vals[0],
        "label" => $vals[1],
        "mail" => isset($vals[2]) ? $vals[2] : context_support_get_support_mail(),
      ];
    }
  }

  return $cat;
}

function context_support_get_categoriy_options() {
  $cat = context_support_get_categories();
  $options = [];
  foreach ($cat as $i => $c) {
    $options[$i] = $c['label'];
  }
  return $options;
}

function context_support_get_support_mail() {
  return variable_get('support_mail', variable_get('site_mail', ini_get('sendmail_from')));
}

/**
 * Implements hook_mail().
 */
function context_support_mail($key, &$message, $params) {

  $language = $message['language'];
  $variables = context_support_prepare_mail_variables($params, $language);

  switch ($key) {
    case 'support_mail':
      $message['subject'] .= context_support_render_ticket_subject($params, $language);
      $message['body'][] = context_support_render_ticket_message($params, $language);
      break;

    case 'support_mail_copy':
      $variables += [
        '!recipient-name' => format_username($params['recipient']),
        '!recipient-edit-url' => url('user/' . $params['recipient']->uid . '/edit', [
          'absolute' => TRUE,
          'language' => $language,
        ]),
      ];
      $message['subject'] .= t('Copy of your support request: !subject', $variables, ['langcode' => $language->language]);

      $message['body'][] = t('Your message:', [], ['langcode' => $language->language]);
      $message['body'][] = $params['message'];

      $message['body'][] = t('You will get an answer to your request within the next 24 hours.', [], ['langcode' => $language->language]);
      break;
  }
}

/**
 * prepare replacement variables needed for emails
 *
 * @param $params
 * @param $language
 *
 * @return array
 */
function context_support_prepare_mail_variables($params, $language) {
  $variables = [
    '!site-name' => variable_get('site_name', 'Drupal'),
    '!subject' => $params['subject'],
    '!category' => isset($params['category']) ? $params['category'] : '',
    '!form-url' => $_SESSION['referer_for_support'],
    '!sender-name' => format_username($params['sender']),
    '!sender-url' => $params['sender']->uid ? url('user/' . $params['sender']->uid, [
      'absolute' => TRUE,
      'language' => $language,
    ]) : $params['sender']->mail,
  ];
  return $variables;
}

/**
 * render ticket subject
 *
 * @param $subject
 * @param $language
 *
 * @return null|string
 */
function context_support_render_ticket_subject($params, $language) {
  $variables = context_support_prepare_mail_variables($params, $language);
  return t('!subject', $variables, ['langcode' => $language->language]);
}

/**
 * render ticket message body
 *
 * @param $params
 */
function context_support_render_ticket_message($params, $language) {
  $variables = context_support_prepare_mail_variables($params, $language);
  $out = "";
  $out .= t("!sender-name (!sender-url) sent a message using the contact form at !form-url.", $variables, ['langcode' => language]);
  $out .= "<br />";
  if (module_exists('browscap')) {
    $info = browscap_get_browser();
    if ($params['browserinfo']) {
      $out .= print_r($info, TRUE);
    }
    else {
      $out .= "Browser: " . $info['comment'] . "\n\r";
      $out .= "Betriebsystem: " . $info['platform'];
    }
  }
  $out .= "<br />";
  $out .= $params['message'];

  return _filter_autop($out);

}

/**
 * Implementats hook_theme_registry_alter().
 */
function context_support_theme_registry_alter(&$theme_registry) {
  $funcs = &$theme_registry['page']['preprocess functions'];
  $key = array_search('context_support_preprocess_page', $funcs);
  unset($funcs[$key]);
  array_unshift($funcs, 'context_support_preprocess_page');
}

/**
 * Preprocess function for the page theme hook.
 *
 * This function doesn't use the arguments, and doesn't return
 * anything.  It adds JS and CSS to the page.  It must do this before
 * the page hook's other preprocess functions, so that the JS and CSS
 * is added before they render $styles, $script and $closure.
 */
function context_support_preprocess_page($content, $show_blocks, $show_messages = TRUE) {
  $path = drupal_get_path('module', 'context_support');

  drupal_add_library('system', 'effects');
  drupal_add_js("$path/context_support.js", 'file');
  drupal_add_css("$path/context_support.css");
}

/**
 * Implements hook_page_alter().
 */
function context_support_page_build(&$page) {

  ctools_include('ajax');

  global $user;
  if ($user->uid == 0) {
    //don't show support link for guests
    return;
  }

  $link = ctools_ajax_text_button('', 'context_support/nojs/contact', '', 'ctools-use-modal context-support-tab context-support-tab-right ctools-modal-salto-style ');
  $page['content']['help'] = [
    '#markup' => $link,
    '#weight' => 25,
  ];
}


/**
 * Implements hook_requirements().
 */
function context_support_requirements($phase) {

  $requirements = [];
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {

    if (!defined('CONTEXT_SUPPORT_API_KEY') || !defined('CONTEXT_SUPPORT_API_URL')) {
      $requirements['context_support_requirements'] = [
        'title' => 'Context Support Requirements',
        'value' => 'The osTicket API configuration is incomplete. Please add <em>CONTEXT_SUPPORT_API_URL</em> and <em>CONTEXT_SUPPORT_API_KEY</em> constants to your settings.php',
        'severity' => REQUIREMENT_ERROR,
      ];
    }

  }
  return $requirements;
}
